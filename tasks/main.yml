---
- name: Check if git binary exists
  stat:
    path: /usr/bin/git
  register: GIT_EXISTS
- name: Install git dependencies
  package:
    name: [git]
    state: present
  become: yes
  vars:
    ansible_python_interpreter: "{{ SYSTEM_PYTHON }}"
  when: not GIT_EXISTS.stat.exists
- name: Check if javac binary exists
  stat:
    path: /usr/bin/javac
  register: JAVAC_EXISTS
- name: Install java dependencies
  package:
    name: [git,java-1.8.0-openjdk]
    state: present
  become: yes
  vars:
    ansible_python_interpreter: "{{ SYSTEM_PYTHON }}"
  when: not JAVAC_EXISTS.stat.exists
- name: "install python pip dependencies"
  pip:
    name: psycopg2-binary
    state: present
  vars:
    ansible_python_interpreter: "{{ APP_PYTHON }}"

###############
# Project dir #
###############

- name: Check for the {{ APP_NAME }} .git directory
  stat:
    path: "{{ APP_SRC }}/.git"
  register: APP_GIT_DIR
- name: Check for the {{ APP_NAME }} pom.xml file
  stat:
    path: "{{ APP_SRC }}/pom.xml"
  register: APP_POM
- name: Create the {{ APP_NAME }} source directory {{ APP_SRC }}
  file:
    name: "{{ APP_SRC }}"
    state: directory
    owner: "{{ USER_NAME }}"
  become: yes
  when: not APP_GIT_DIR.stat.exists and not APP_POM.stat.exists
- name: Clone the {{ APP_REPO }} source code into {{ APP_SRC }}
  git:
    repo: "{{ APP_REPO }}"
    dest: "{{ APP_SRC }}"
  when: not APP_GIT_DIR.stat.exists and not APP_POM.stat.exists

##############
# Static dir #
##############

- name: Check for the {{ APP_STATIC_NAME }} .git directory
  stat:
    path: "{{ APP_SRC }}-static/.git"
  register: APP_STATIC_GIT_DIR
- name: Create the {{ APP_STATIC_NAME }} source directory {{ APP_SRC }}-static
  file:
    name: "{{ APP_SRC }}-static"
    state: directory
    owner: "{{ USER_NAME }}"
  become: yes
  when: not APP_STATIC_GIT_DIR.stat.exists
- name: Clone the {{ APP_STATIC_REPO }} source code into {{ APP_SRC }}-static
  git:
    repo: "{{ APP_STATIC_REPO }}"
    dest: "{{ APP_SRC }}-static"
  when: not APP_STATIC_GIT_DIR.stat.exists

###############
# Ansible dir #
###############

- name: Check for the {{ APP_ANSIBLE_NAME }} .git directory
  stat:
    path: "{{ APP_SRC }}-ansible/.git"
  register: APP_ANSIBLE_GIT_DIR
- name: Create the {{ APP_ANSIBLE_NAME }} source directory {{ APP_SRC }}-ansible
  file:
    name: "{{ APP_SRC }}-ansible"
    state: directory
    owner: "{{ USER_NAME }}"
  become: yes
  when: not APP_ANSIBLE_GIT_DIR.stat.exists
- name: Clone the {{ APP_ANSIBLE_REPO }} source code into {{ APP_SRC }}-ansible
  git:
    repo: "{{ APP_ANSIBLE_REPO }}"
    dest: "{{ APP_SRC }}-ansible"
  when: not APP_ANSIBLE_GIT_DIR.stat.exists

###########
# Service #
###########

- name: Create the {{ APP_NAME }} systemd services. 
  template:
    src: project_service
    dest: "/usr/lib/systemd/system/watch-{{ item.APP_NAME }}.service"
  become: yes
  loop: "{{ APP_SERVICES }}"
  when: ansible_pkg_mgr != 'homebrew'
- name: Create the {{ item.APP_NAME }} config dirs. 
  file:
    name: "{{ item.APP_SRC }}/config"
    state: directory
    owner: "{{ USER_NAME }}"
  loop: "{{ APP_SERVICES }}"
- name: Create the {{ item.APP_NAME }} enUS configs. 
  template:
    src: project_config_enUS.yml
    dest: "{{ item.APP_SRC }}/config/{{ item.APP_NAME }}.config"
  loop: "{{ APP_SERVICES }}"
- name: Reload the services. 
  systemd:
    daemon_reload: yes
  become: yes
  loop: "{{ APP_SERVICES }}"
  when: ansible_pkg_mgr != 'homebrew'
- name: Start and enable the {{ item.APP_NAME }} services. 
  service:
    name: "watch-{{ item.APP_NAME }}"
    enabled: yes
    state: restarted
  become: yes
  loop: "{{ APP_SERVICES }}"
  when: ansible_pkg_mgr != 'homebrew'
- name: Create the {{ APP_NAME }} launchd service {{ APP_SYSTEMD }}.
  template:
    src: project_launchd_service
    dest: "~/Library/LaunchAgents/org.project.plist"
  loop: "{{ APP_SERVICES }}"
  when: ansible_pkg_mgr == 'homebrew'
- name: Load the {{ APP_NAME }} launchd service {{ APP_SYSTEMD }}.
  shell: launchctl load ~/Library/LaunchAgents/org.project.plist
  when: ansible_pkg_mgr == 'homebrew'
- name: Start the {{ APP_NAME }} launchd service {{ APP_SYSTEMD }}.
  shell: launchctl start org.project
  when: ansible_pkg_mgr == 'homebrew'
  changed_when: false


##############
# PostgreSQL #
##############

- name: Create enUS database user
  postgresql_user:
    name: "{{ APP_DB_USER_ENUS }}"
    password: "{{ APP_DB_PASSWORD_ENUS }}"
    login_unix_socket: /tmp
    login_user: "{{ POSTGRES_BECOME_USER }}"
    db: postgres
  become: true
  become_user: "{{ POSTGRES_BECOME_USER }}"
- name: Create enUS database
  postgresql_db:
    name: "{{ APP_DB_NAME_ENUS }}"
    owner: "{{ APP_DB_USER_ENUS }}"
    login_unix_socket: /tmp
    login_user: "{{ POSTGRES_BECOME_USER }}"
    db: postgres
  become: true
  become_user: "{{ POSTGRES_BECOME_USER }}"
- name: Grant user access to database
  postgresql_pg_hba:
    dest: "{{ POSTGRES_HBA_CONF }}"
    contype: host
    users: "{{ APP_DB_USER_ENUS }}"
    source: "all"
    databases: "{{ APP_DB_NAME_ENUS }}"
    method: md5
    create: true
  become: true
  become_user: "{{POSTGRES_BECOME_USER}}"
- name: Restart the postgresql service. 
  service:
    name: "{{ POSTGRES_SERVICE }}"
    state: restarted
  become: yes
  when: ansible_pkg_mgr != 'homebrew'
- name: Start the {{ POSTGRES_NAME }} launchd service.
  shell: launchctl start org.postgresql
  when: ansible_pkg_mgr == 'homebrew'
  changed_when: false

###############
# Solr Search #
###############

- name: Check for existing solr collection enUS
  shell: "{{ SOLR_OPT }}/server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:{{ ZOOKEEPER_PORT }} -cmd ls /collections/{{ APP_SOLR_COLLECTION_ENUS }}"
  ignore_errors: yes
  register: SOLR_COLLECTION_EXISTS_ENUS
  changed_when: false
- name: Create collection in solr enUS
  shell: "{{ SOLR_OPT }}/bin/solr create -n computate -c {{ APP_SOLR_COLLECTION_ENUS }}"
  when: SOLR_COLLECTION_EXISTS_ENUS.rc != 0

###########
# SSL/TLS #
###########

- name: Create the keystore directory {{ SSL_KEYSTORE_PATH }}
  file:
    name: "{{ SSL_KEYSTORE_PATH }}"
    state: directory
    owner: "{{ USER_NAME }}"
  become: yes
  when: APP_SITE_BASE_URL_ENUS is regex("^https://")
- name: Create the {{ APP_NAME }} keystore properties {{ SSL_KEYSTORE_PATH }}/{{ SSL_PROPERTIES_FILENAME }}
  template:
    src: project_keystore.properties
    dest: "{{ SSL_KEYSTORE_PATH }}/{{ APP_SSL_PROPERTIES_FILENAME }}"
  when: APP_SITE_BASE_URL_ENUS is regex("^https://")
- name: Create the {{ APP_NAME }} keystore jks {{ SSL_JKS_PATH }}
  shell: echo {{ SSL_JKS_BASE64 }} | base64 -d > {{ SSL_JKS_PATH }}
  when: APP_SITE_BASE_URL_ENUS is regex("^https://")
- name: Build the source code in /usr/local/src/computate
  shell: "mvn clean install"
  args:
    chdir: "/usr/local/src/computate"
- name: Build the source code in {{ APP_SRC }}
  shell: "mvn clean install"
  args:
    chdir: "{{ APP_SRC }}"
