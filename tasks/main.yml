---
- name: "Include default variables in {{ SITE_DEFAULTS }}"
  include_vars:
    file: "{{ SITE_DEFAULTS }}"
- name: "Install dependencies as root: {{ SITE_DEPENDENCIES | join(' ') }}"
  package:
    name: "{{ SITE_DEPENDENCIES }}"
  become: true
  register: INSTALL_DEPENDENCIES
  ignore_errors: true
- name: "Install dependencies as user: {{ SITE_DEPENDENCIES | join(' ') }}"
  shell: "pkcon install -y {{ item }} | true"
  loop: "{{ SITE_DEPENDENCIES }}"
  when: INSTALL_DEPENDENCIES.failed

- name: Check if git binary exists
  stat:
    path: /usr/bin/git
  register: GIT_EXISTS
  #- name: Install git dependencies
  #  package:
  #    name: [git]
  #    state: present
  #  become: yes
  #  vars:
  #    ansible_python_interpreter: "{{ SYSTEM_PYTHON }}"
  #  when: not GIT_EXISTS.stat.exists
- name: Check if javac binary exists
  stat:
    path: /usr/bin/javac
  register: JAVAC_EXISTS
  #- name: Install java dependencies
  #  package:
  #    name: [git,java-1.8.0-openjdk]
  #    state: present
  #  become: yes
  #  vars:
  #    ansible_python_interpreter: "{{ SYSTEM_PYTHON }}"
  #  when: not JAVAC_EXISTS.stat.exists

###############
# Project dir #
###############

- name: Check for the {{ SITE_NAME }} .git directory
  stat:
    path: "{{ SITE_SRC }}/.git"
  register: SITE_GIT_DIR
- name: Check for the {{ SITE_NAME }} README.md file
  stat:
    path: "{{ SITE_SRC }}/README.md"
  register: SITE_README
- name: Create the {{ SITE_NAME }} source directory {{ SITE_SRC }}
  file:
    name: "{{ SITE_SRC }}"
    state: directory
  when: not SITE_GIT_DIR.stat.exists and not SITE_README.stat.exists
- name: Clone the {{ SITE_REPO }} source code into {{ SITE_SRC }}
  git:
    repo: "{{ SITE_REPO }}"
    dest: "{{ SITE_SRC }}"
  when: not SITE_GIT_DIR.stat.exists and not SITE_README.stat.exists

##############
# Static dir #
##############

- name: Check for the {{ SITE_STATIC_NAME }} .git directory
  stat:
    path: "{{ SITE_SRC }}-static/.git"
  register: SITE_STATIC_GIT_DIR
- name: Create the {{ SITE_STATIC_NAME }} source directory {{ SITE_SRC }}-static
  file:
    name: "{{ SITE_SRC }}-static"
    state: directory
  when: not SITE_STATIC_GIT_DIR.stat.exists
- name: Clone the {{ SITE_STATIC_REPO }} source code into {{ SITE_SRC }}-static
  git:
    repo: "{{ SITE_STATIC_REPO }}"
    dest: "{{ SITE_SRC }}-static"
  when: not SITE_STATIC_GIT_DIR.stat.exists

###############
# Ansible dir #
###############

- name: Check for the {{ SITE_ANSIBLE_NAME }} .git directory
  stat:
    path: "{{ SITE_SRC }}-ansible/.git"
  register: SITE_ANSIBLE_GIT_DIR
- name: Create the {{ SITE_ANSIBLE_NAME }} source directory {{ SITE_SRC }}-ansible
  file:
    name: "{{ SITE_SRC }}-ansible"
    state: directory
  when: not SITE_ANSIBLE_GIT_DIR.stat.exists
- name: Clone the {{ SITE_ANSIBLE_REPO }} source code into {{ SITE_SRC }}-ansible
  git:
    repo: "{{ SITE_ANSIBLE_REPO }}"
    dest: "{{ SITE_SRC }}-ansible"
  when: not SITE_ANSIBLE_GIT_DIR.stat.exists
  ignore_errors: true

###########
# Eclipse #
###########

###########
# Service #
###########

- name: Create the {{ SITE_NAME }} systemd services. 
  template:
    src: project_systemd.service
    dest: "{{SITE_SYSTEMD }}"
  loop: "{{ SITE_SERVICES }}"
  when: ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr != 'homebrew'
- name: Create the {{ item.SITE_NAME }} config dirs. 
  file:
    name: "{{ item.SITE_SRC }}/config"
    state: directory
    owner: "{{ USER_NAME }}"
  loop: "{{ SITE_SERVICES }}"
- name: Create the {{ item.SITE_NAME }} enUS configs. 
  template:
    src: "{{ item.SITE_SRC }}/local/template.yml"
    dest: "{{ item.SITE_SRC }}/config/{{ item.SITE_NAME }}.yml"
  loop: "{{ SITE_SERVICES }}"
- name: Reload the services. 
  systemd:
    daemon_reload: yes
    scope: "{{ 'system' if ansible_distribution_file_variety == 'RedHat' and (ansible_distribution_major_version | int) <= 7 else 'user' }}"
  loop: "{{ SITE_SERVICES }}"
  when: ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr != 'homebrew'
- name: Start and enable the {{ item.SITE_NAME }} services. 
  service:
    name: "watch-{{ item.SITE_NAME }}"
    enabled: yes
    state: restarted
    scope: "{{ 'system' if ansible_distribution_file_variety == 'RedHat' and (ansible_distribution_major_version | int) <= 7 else 'user' }}"
  loop: "{{ SITE_SERVICES }}"
  when: ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr != 'homebrew'
- name: Create the {{ SITE_NAME }} launchd service {{ SITE_SYSTEMD }}.
  template:
    src: project_launchd_service
    dest: "~/Library/LaunchAgents/org.project.plist"
  loop: "{{ SITE_SERVICES }}"
  when: ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr == 'homebrew'
- name: Load the {{ SITE_NAME }} launchd service {{ SITE_SYSTEMD }}.
  shell: launchctl load ~/Library/LaunchAgents/org.project.plist
  when: ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr == 'homebrew'
- name: Start the {{ SITE_NAME }} launchd service {{ SITE_SYSTEMD }}.
  shell: launchctl start org.project
  when: ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr == 'homebrew'
  changed_when: false


##############
# PostgreSQL #
##############

- name: Create enUS database user
  postgresql_user:
    name: "{{ JDBC_USERNAME }}"
    password: "{{ JDBC_PASSWORD }}"
    login_unix_socket: /tmp
    login_user: "{{ POSTGRES_BECOME_USER }}"
    db: postgres
    #  become: true
    #  become_user: "{{ POSTGRES_BECOME_USER }}"
- name: Create enUS database
  postgresql_db:
    name: "{{ JDBC_DATABASE }}"
    owner: "{{ JDBC_USERNAME }}"
    login_unix_socket: /tmp
    login_user: "{{ POSTGRES_BECOME_USER }}"
    db: postgres
    #  become: true
    #  become_user: "{{ POSTGRES_BECOME_USER }}"
- name: Grant user access to database
  postgresql_pg_hba:
    dest: "{{ POSTGRES_HBA_CONF }}"
    contype: host
    users: "{{ JDBC_USERNAME }}"
    source: "all"
    databases: "{{ JDBC_DATABASE }}"
    method: md5
    create: true
    #  become: true
    #  become_user: "{{POSTGRES_BECOME_USER}}"
- name: Restart the postgresql service. 
  service:
    name: "{{ POSTGRES_SERVICE }}"
    state: restarted
    scope: "{{ 'system' if ansible_distribution_file_variety == 'RedHat' and (ansible_distribution_major_version | int) <= 7 else 'user' }}"
  when: ansible_pkg_mgr != 'homebrew'
- name: Start the {{ POSTGRES_NAME }} launchd service.
  shell: launchctl start org.postgresql
  when: ansible_pkg_mgr == 'homebrew'
  changed_when: false
- name: Create the database tables
  postgresql_query:
    db: "{{ JDBC_DATABASE }}"
    login_unix_socket: /tmp
    login_user: "{{ JDBC_USERNAME }}"
    path_to_script: "{{ SITE_SRC }}/src/main/resources/sql/db-create.sql"
  ignore_errors: true

###############
# Solr Search #
###############

- name: Check for existing solr collection enUS
  shell: "{{ SOLR_OPT }}/server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:{{ ZOOKEEPER_PORT }} -cmd ls /collections/{{ SOLR_COLLECTION }}"
  ignore_errors: yes
  register: SOLR_COLLECTION_EXISTS
  changed_when: false
- name: Create collection in solr enUS
  shell: "{{ SOLR_OPT }}/bin/solr create -n computate -c {{ SOLR_COLLECTION }}"
  when: SOLR_COLLECTION_EXISTS.rc != 0

#####################
# Build application #
#####################

- name: Build the source code in {{ COMPUTATE_SRC }}
  shell: "mvn clean install"
  args:
    chdir: "{{ COMPUTATE_SRC }}"
#- name: Build the source code in {{ SITE_SRC }}
#  shell: "mvn clean install"
#  args:
#    chdir: "{{ SITE_SRC }}"
