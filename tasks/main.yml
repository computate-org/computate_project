---
- name: "Include default variables in {{ SITE_DEFAULTS }}"
  include_vars:
    file: "{{ SITE_DEFAULTS }}"
- name: "Install dependencies as root: {{ SITE_DEPENDENCIES | join(' ') }}"
  package:
    name: "{{ SITE_DEPENDENCIES }}"
  become: true
  register: INSTALL_DEPENDENCIES
  ignore_errors: true
- name: "Install dependencies as user: {{ SITE_DEPENDENCIES | join(' ') }}"
  shell: "pkcon install -y {{ item }} | true"
  loop: "{{ SITE_DEPENDENCIES }}"
  when: INSTALL_DEPENDENCIES.failed

- name: Check if git binary exists
  stat:
    path: /usr/bin/git
  register: GIT_EXISTS
  #- name: Install git dependencies
  #  package:
  #    name: [git]
  #    state: present
  #  become: yes
  #  vars:
  #    ansible_python_interpreter: "{{ SYSTEM_PYTHON }}"
  #  when: not GIT_EXISTS.stat.exists
- name: Check if javac binary exists
  stat:
    path: /usr/bin/javac
  register: JAVAC_EXISTS
  #- name: Install java dependencies
  #  package:
  #    name: [git,java-1.8.0-openjdk]
  #    state: present
  #  become: yes
  #  vars:
  #    ansible_python_interpreter: "{{ SYSTEM_PYTHON }}"
  #  when: not JAVAC_EXISTS.stat.exists

###############
# Project dir #
###############

- name: Check for the {{ SITE_NAME }} .git directory
  stat:
    path: "{{ SITE_SRC }}/.git"
  register: SITE_GIT_DIR
- name: Check for the {{ SITE_NAME }} README.md file
  stat:
    path: "{{ SITE_SRC }}/README.md"
  register: SITE_README
- name: Create the {{ SITE_NAME }} source directory {{ SITE_SRC }}
  file:
    name: "{{ SITE_SRC }}"
    state: directory
  when: not SITE_GIT_DIR.stat.exists and not SITE_README.stat.exists
- name: Clone the {{ SITE_REPO }} source code into {{ SITE_SRC }}
  git:
    repo: "{{ SITE_REPO }}"
    dest: "{{ SITE_SRC }}"
  when: not SITE_GIT_DIR.stat.exists and not SITE_README.stat.exists

##############
# Static dir #
##############

- name: Check for the {{ SITE_STATIC_NAME }} .git directory
  stat:
    path: "{{ SITE_SRC }}-static/.git"
  register: SITE_STATIC_GIT_DIR
- name: Create the {{ SITE_STATIC_NAME }} source directory {{ SITE_SRC }}-static
  file:
    name: "{{ SITE_SRC }}-static"
    state: directory
  when: not SITE_STATIC_GIT_DIR.stat.exists
- name: Clone the {{ SITE_STATIC_REPO }} source code into {{ SITE_SRC }}-static
  git:
    repo: "{{ SITE_STATIC_REPO }}"
    dest: "{{ SITE_SRC }}-static"
  when: not SITE_STATIC_GIT_DIR.stat.exists
  ignore_errors: true

###########
# Eclipse #
###########

#- name: Create the {{ SITE_SRC }}/.project
#  template:
#    src: eclipse/project.xml
#    dest: "{{ SITE_SRC }}/.project"
#- name: Create the {{ SITE_SRC }}-static/.project
#  template:
#    src: eclipse/project-static.xml
#    dest: "{{ SITE_SRC }}-static/.project"
#- name: Create the {{ SITE_SRC }}-ansible/.project
#  template:
#    src: eclipse/project-ansible.xml
#    dest: "{{ SITE_SRC }}-ansible/.project"
#- name: Create the {{ SITE_SRC }}/.classpath
#  template:
#    src: eclipse/classpath.xml
#    dest: "{{ SITE_SRC }}/.classpath"
#  when: ENABLE_LAUNCH
- name: "Create the project file directory {{ SITE_SRC | dirname }}/.metadata/.plugins/org.eclipse.debug.core/.launches"
  file:
    state: directory
    path: "{{ SITE_SRC | dirname }}/.metadata/.plugins/org.eclipse.debug.core/.launches"
  when: ENABLE_LAUNCH
- name: Create the {{ SITE_SRC | dirname }}/.metadata/.plugins/org.eclipse.debug.core/.launches/{{ SITE_NAME }}.launch
  template:
    src: eclipse/launchMainVerticle.xml
    dest: "{{ SITE_SRC | dirname }}/.metadata/.plugins/org.eclipse.debug.core/.launches/{{ SITE_NAME }}.launch"
  when: ENABLE_LAUNCH
- name: Create the {{ SITE_SRC | dirname }}/.metadata/.plugins/org.eclipse.debug.core/.launches/{{ SITE_NAME }}-OpenApi3Generator.launch
  template:
    src: eclipse/launchOpenApi3Generator.xml
    dest: "{{ SITE_SRC | dirname }}/.metadata/.plugins/org.eclipse.debug.core/.launches/{{ SITE_NAME }}-OpenApi3Generator.launch"
  when: ENABLE_LAUNCH

###########
# Service #
###########

- name: Create the {{ SITE_NAME }} systemd services. 
  template:
    src: project_systemd.service
    dest: "{{SITE_SYSTEMD }}"
  loop: "{{ SITE_SERVICES }}"
  when: (SYSTEMD_ENABLED | bool) and ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr != 'homebrew'
- name: Create the {{ item.SITE_NAME }} config dirs. 
  file:
    name: "{{ item.SITE_SRC }}/config"
    state: directory
  loop: "{{ SITE_SERVICES }}"

############################
# Lookup OpenShift Secrets #
############################

- name: Set some facts
  set_fact:
    KAFKA_SECURITY_PROTOCOL: SSL
    KAFKA_SSL_KEYSTORE_TYPE: pkcs12
    KAFKA_SSL_KEYSTORE_LOCATION: "{{ SITE_SRC }}/config/kafka-user.p12"
    KAFKA_SSL_TRUSTSTORE_TYPE: pkcs12
    KAFKA_SSL_TRUSTSTORE_LOCATION: "{{ SITE_SRC }}/config/kafka-ca.p12"
- name: Get JDBC_PASSWORD
  set_fact:
    JDBC_PASSWORD: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=POSTGRES_SECRET, namespace=POSTGRES_NAMESPACE, validate_certs=false)[0].data.password | b64decode }}"
  ignore_errors: true
- name: Get KAFKA_SSL_KEYSTORE_PASSWORD
  set_fact:
    KAFKA_SSL_KEYSTORE_PASSWORD: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=KAFKA_SSL_KEYSTORE_SECRET, namespace=KAFKA_NAMESPACE, validate_certs=false)[0].data['user.password'] | b64decode }}"
  ignore_errors: true
- name: Get KAFKA_SSL_KEYSTORE_P12
  set_fact:
    KAFKA_SSL_KEYSTORE_P12: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=KAFKA_SSL_KEYSTORE_SECRET, namespace=KAFKA_NAMESPACE, validate_certs=false)[0].data['user.p12'] }}"
  ignore_errors: true
- name: Get KAFKA_SSL_TRUSTSTORE_PASSWORD
  set_fact:
    KAFKA_SSL_TRUSTSTORE_PASSWORD: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=KAFKA_SSL_TRUSTSTORE_SECRET, namespace=KAFKA_NAMESPACE, validate_certs=false)[0].data['ca.password'] | b64decode }}"
  ignore_errors: true
- name: Get KAFKA_SSL_TRUSTSTORE_P12
  set_fact:
    KAFKA_SSL_TRUSTSTORE_P12: "{{ query('kubernetes.core.k8s', kind='Secret', resource_name=KAFKA_SSL_TRUSTSTORE_SECRET, namespace=KAFKA_NAMESPACE, validate_certs=false)[0].data['ca.p12'] }}"
  ignore_errors: true

#################
# Create config #
#################

- name: Write KAFKA_SSL_KEYSTORE_LOCATION
  copy:
    dest: "{{ KAFKA_SSL_KEYSTORE_LOCATION }}"
    content: "{{ KAFKA_SSL_KEYSTORE_P12 | b64decode }}"
  ignore_errors: true
- name: Write KAFKA_SSL_TRUSTSTORE_LOCATION
  copy:
    dest: "{{ KAFKA_SSL_TRUSTSTORE_LOCATION }}"
    content: "{{ KAFKA_SSL_TRUSTSTORE_P12 | b64decode }}"
  ignore_errors: true
- name: Check if config exists
  stat:
    path: "{{ item.SITE_SRC }}/config/{{ item.SITE_NAME }}.yml"
  loop: "{{ SITE_SERVICES }}"
  register: CONFIG_EXISTS
- name: Create the {{ item.SITE_NAME }} enUS configs. 
  template:
    src: "{{ item.SITE_SRC }}/local/template.yml"
    dest: "{{ item.SITE_SRC }}/config/{{ item.SITE_NAME }}.yml"
  loop: "{{ SITE_SERVICES }}"
  when: ENABLE_CONFIG_TEMPLATE
- name: Reload the services. 
  systemd:
    daemon_reload: yes
    scope: "{{ 'system' if ansible_distribution_file_variety == 'RedHat' and (ansible_distribution_major_version | int) <= 7 else 'user' }}"
  loop: "{{ SITE_SERVICES }}"
  when: (SYSTEMD_ENABLED | bool) and ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr != 'homebrew'
- name: Start and enable the {{ item.SITE_NAME }} services. 
  service:
    name: "watch-{{ item.SITE_NAME }}"
    enabled: yes
    state: restarted
    scope: "{{ 'system' if ansible_distribution_file_variety == 'RedHat' and (ansible_distribution_major_version | int) <= 7 else 'user' }}"
  loop: "{{ SITE_SERVICES }}"
  when: (SYSTEMD_ENABLED | bool) and ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr != 'homebrew'
- name: Create the {{ SITE_NAME }} launchd service {{ SITE_SYSTEMD }}.
  template:
    src: project_launchd_service
    dest: "~/Library/LaunchAgents/org.project.plist"
  loop: "{{ SITE_SERVICES }}"
  when: (SYSTEMD_ENABLED | bool) and ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr == 'homebrew'
- name: Load the {{ SITE_NAME }} launchd service {{ SITE_SYSTEMD }}.
  shell: launchctl load ~/Library/LaunchAgents/org.project.plist
  when: (SYSTEMD_ENABLED | bool) and ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr == 'homebrew'
- name: Start the {{ SITE_NAME }} launchd service {{ SITE_SYSTEMD }}.
  shell: launchctl start org.project
  when: (SYSTEMD_ENABLED | bool) and ENABLE_CODE_GENERATION_SERVICE and ansible_pkg_mgr == 'homebrew'
  changed_when: false
- name: Output command to run without systemd
  debug:
    msg: env SITE_NAME={{ item.SITE_NAME }} SITE_PATH={{ item.SITE_SRC }} COMPUTATE_SRC={{ COMPUTATE_SRC }} SITE_LANG={{ SITE_LANG }} {{ COMPUTATE_SRC }}/bin/enUS/watch.sh
  when: not SYSTEMD_ENABLED

##############
# PostgreSQL #
##############

#- name: Create enUS database user
#  postgresql_user:
#    login_host: "localhost"
#    port: "{{ JDBC_PORT }}"
#    name: "{{ JDBC_USERNAME }}"
#    password: "{{ JDBC_PASSWORD }}"
#    login_user: "{{ POSTGRES_BECOME_USER }}"
#    db: postgres
#    #  become: true
#    #  become_user: "{{ POSTGRES_BECOME_USER }}"
#- name: Create enUS database
#  postgresql_db:
#    login_host: "localhost"
#    port: "{{ JDBC_PORT }}"
#    name: "{{ JDBC_DATABASE }}"
#    owner: "{{ JDBC_USERNAME }}"
#    login_user: "{{ POSTGRES_BECOME_USER }}"
#    db: postgres
#    #  become: true
#    #  become_user: "{{ POSTGRES_BECOME_USER }}"
#- name: Grant user access to database
#  postgresql_pg_hba:
#    login_host: "localhost"
#    port: "{{ JDBC_PORT }}"
#    dest: "{{ POSTGRES_HBA_CONF }}"
#    contype: host
#    users: "{{ JDBC_USERNAME }}"
#    source: "all"
#    databases: "{{ JDBC_DATABASE }}"
#    method: md5
#    create: true
#    #  become: true
#    #  become_user: "{{POSTGRES_BECOME_USER}}"
#- name: Restart the postgresql service. 
#  service:
#    name: "{{ POSTGRES_SERVICE }}"
#    state: restarted
#    scope: "{{ 'system' if ansible_distribution_file_variety == 'RedHat' and (ansible_distribution_major_version | int) <= 7 else 'user' }}"
#  when: ansible_pkg_mgr != 'homebrew'
#- name: Start the {{ POSTGRES_NAME }} launchd service.
#  shell: launchctl start org.postgresql
#  when: ansible_pkg_mgr == 'homebrew'
#  changed_when: false
#- name: Create the database tables
#  postgresql_query:
#    db: "{{ JDBC_DATABASE }}"
#    login_unix_socket: /tmp
#    login_user: "{{ JDBC_USERNAME }}"
#    path_to_script: "{{ SITE_SRC }}/src/main/resources/sql/db-create.sql"
#  ignore_errors: true

###############
# Solr Search #
###############

#- name: Check for existing solr collection enUS
#  shell: "{{ SOLR_OPT }}/server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:{{ ZOOKEEPER_PORT }} -cmd ls /collections/{{ SOLR_COLLECTION }}"
#  ignore_errors: yes
#  register: SOLR_COLLECTION_EXISTS
#  changed_when: false
#- name: Create collection in solr enUS
#  shell: "{{ SOLR_OPT }}/bin/solr create -n computate -c {{ SOLR_COLLECTION }}"
#  when: SOLR_COLLECTION_EXISTS.rc != 0

- name: Upload computate configset to solr
  kubernetes.core.k8s_exec:
    pod: solr-0
    command: >-
      /opt/solr/bin/solr zk upconfig -n computate -d /opt/solr/server/solr/configsets/computate -z 'zookeeper.{{ ZOOKEEPER_NAMESPACE }}.svc:2181'
    namespace: "{{ SOLR_NAMESPACE }}"
  register: solr_upconfig
  changed_when: false
- debug:
    var: solr_upconfig

- name: Create Solr computate collection
  kubernetes.core.k8s_exec:
    pod: solr-0
    command: >-
      /opt/solr/bin/solr create_collection -c computate -n computate
    namespace: "{{ SOLR_NAMESPACE }}"
  register: create_computate_collection
  ignore_errors: True
  changed_when: create_computate_collection is not search("already exists")
- name: Test create_computate_collection success
  fail:
    msg: "{{ command_status }}"
  when: create_computate_collection.failed and create_computate_collection is not search("already exists")

- name: Create Solr {{ SOLR_COLLECTION }} collection
  kubernetes.core.k8s_exec:
    pod: solr-0
    command: >-
      /opt/solr/bin/solr create_collection -c {{ SOLR_COLLECTION }} -n computate
    namespace: "{{ SOLR_NAMESPACE }}"
  register: create_collection
  ignore_errors: True
  changed_when: create_collection is not search("already exists")
- name: Test create {{ SOLR_COLLECTION }} collection success
  fail:
    msg: "{{ command_status }}"
  when: create_collection.failed and create_collection is not search("already exists")

- name: Create Solr computate collection
  kubernetes.core.k8s_exec:
    pod: solr-0
    command: >-
      /opt/solr/bin/solr create_collection -c computate -n computate
    namespace: "{{ SOLR_NAMESPACE }}"
  register: create_collection
  ignore_errors: True
  changed_when: create_collection is not search("already exists")
- name: Test create_collection success
  fail:
    msg: "{{ command_status }}"
  when: create_collection.failed and create_collection is not search("already exists")

#####################
# Build application #
#####################

- name: Build the source code in {{ COMPUTATE_SRC }}
  shell: "mvn clean install"
  args:
    chdir: "{{ COMPUTATE_SRC }}"
  when: MAVEN | bool
- name: Build the source code in {{ SITE_SRC }}
  shell: "mvn clean install -DskipTests"
  args:
    chdir: "{{ SITE_SRC }}"
  when: MAVEN | bool
